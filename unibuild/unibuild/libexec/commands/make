#!/bin/sh -e
#
# make - Run target(s) for all packages.
#

COMMON="$(dirname $0)/../common"
if [ -e "${COMMON}" ]
then
    . "${COMMON}"
elif [ -e "${COMMON}.raw" ]
then
    # This is a special case for an original build
    . "${COMMON}.raw"
else
    echo "Unable to find ${COMMON}" 1>&2
    exit 2
fi

help()
{
    cat <<EOF
Usage: ${WHOAMI} [ OPTIONS ] [ TARGET [ TARGET ... ] ]

Where TARGETs are a list of make targets to build.  No no targets are
specified, the default target will be built.

OPTIONS:

  --dry      Do a dry run
  --file F   Get order from file F instead of unibuild-order
  --reverse  Operate in reverse order
  --start P  Start with package P
  --stop P   Stop after package P

EOF
}


BUNDLE=
DRY=
FILE=unibuild-order
REVERSE=cat
START=
STOP=


while [ "$1" ]
do
    case "$1" in

	--bundle)
	    BUNDLE="$2"
	    shift
	    shift
	    ;;

	--dry)
	    DRY=echo
	    shift
	    ;;

	--file)
	    FILE="$2"
	    shift
	    shift
	    ;;

	--start)
	    START="$2"
	    shift
	    shift
	    ;;

	--stop)
	    STOP="$2"
	    shift
	    shift
	    ;;

	--reverse)
	    REVERSE=reverse
	    shift
	    ;;

	--help)
	    help
	    exit 0
	    ;;

	--*)
	    die "Unknown option '$1'"
	    ;;

	*)
	    break
	    ;;
    esac
done

validate_startstop "${START}" "${BUNDLE}" "${FILE}"
validate_startstop "${STOP}" "${BUNDLE}" "${FILE}"


# Reverse the order of lines in a file.  This emulates tac(1) in a
# POSIX-y way.  Source:
# http://web.archive.org/web/20090204080114/http://student.northpark.edu/pemente/sed/sed1line.txt
reverse()
{
    sed '1!G;h;$!d'
}

[ "${FILE}" != '-' -a ! -r "${FILE}" ] \
    && die "No ${FILE} file.  Not doing anything."

cat ${FILE} \
    | build_order "${BUNDLE}" \
    | ${REVERSE} \
    | ([ -n "${START}" ] && sed -n "/^${START}\$/,\$p" || cat) \
    | while read PACKAGE
do

    [ -d "${PACKAGE}" ] || die "No directory for package '${PACKAGE}'."

    if ! (find "${PACKAGE}" -type d | grep -E -qe "/unibuild-packaging/${OSINFO_PACKAGING}\$")
    then
	section SKIPPING ${PACKAGE}:  No ${OSINFO_PACKAGING} build
	continue
    fi

    if package_has_switch "${FILE}" "${PACKAGE}" no-install
    then
 	TARGETS=$(echo "$@" | sed -e 's/\s\+/\n/g' | grep -F -vx install)
    else
	TARGETS="$@"
    fi

    [ -z "${TARGETS}" ] \
	&& section BUILDING ${PACKAGE} \
	|| section BUILDING ${PACKAGE}: make ${TARGETS}

    ${DRY} make -C "${PACKAGE}" ${TARGETS}

    if [ "${PACKAGE}" = "${STOP}" ]
    then
	break
    fi

done

exit 0
