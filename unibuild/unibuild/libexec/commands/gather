#!/bin/sh -e
#
# gather - Gather all products into a single directory
#

COMMON="$(dirname $0)/../common"
if [ -e "${COMMON}" ]
then
    . "${COMMON}"
elif [ -e "${COMMON}.raw" ]
then
    # This is a special case for an original build
    . "${COMMON}.raw"
else
    echo "Unable to find ${COMMON}" 1>&2
    exit 2
fi


help()
{
    cat <<EOF
Usage: ${WHOAMI} [ OPTIONS ] DESTINATION

Where DESTINATION is the directory where all products should be
deposited.

OPTIONS:

  --bundle B   Include only bundle B in the output
  --file F     Take input from file F
  --start P    Start with package P
  --stop P     Stop after package P

EOF
}

BUNDLE=
START=
STOP=

FILE=unibuild-order

while [ "$1" ]
do
    case "$1" in

	--bundle)
	    BUNDLE="$2"
	    shift
	    shift
	    ;;

	--file)
	    FILE="$2"
	    shift
	    shift
	    ;;

	--start)
	    START="$2"
	    shift
	    shift
	    ;;

	--stop)
	    STOP="$2"
	    shift
	    shift
	    ;;

	--help)
	    help
	    exit 0
	    ;;

	--*)
	    die "Unknown option '$1'"
	    ;;

	*)
	    break
	    ;;
    esac
done

if [ $# -ne 1 ]
then
    help
    die
fi

validate_startstop "${START}" "${BUNDLE}" "${FILE}"
validate_startstop "${STOP}" "${BUNDLE}" "${FILE}"

REPO=$1
[ -d "${REPO}" ] || die "${REPO}: Not a directory"

case "${OSINFO_PACKAGING}" in
    rpm)
	DEST="${REPO}/RPMS"
	mkdir -p "${DEST}"
	;;    
    deb)
	DEST="${REPO}"
	mkdir -p "${DEST}"
	;;
    *)
	die "Don't know how to build a repository for ${OSINFO_FAMILY}"
	;;
esac

# Find the absolute path because it's going to be handed to Makefiles
# in other directories.
DEST=$(readlink -e "${DEST}")

BUILD_LIST="${TMPBASE}.list"
rm -f "${BUILD_LIST}"

[ "${FILE}" != '-' -a ! -r "${FILE}" ] \
    && die "No ${FILE} file.  Not doing anything."

cat ${FILE} \
    | build_order "${BUNDLE}" \
    | ([ -n "${START}" ] && sed -n "/^${START}\$/,\$p" || cat) \
    | while read PACKAGE
do

    if ! (find "${PACKAGE}" -type d | grep -E -qe "/unibuild-packaging/${OSINFO_PACKAGING}\$")
    then
	section SKIPPING ${PACKAGE}:  No ${OSINFO_PACKAGING} build
	continue
    fi

    echo "${PACKAGE}" >> "${BUILD_LIST}"

    if [ "${PACKAGE}" = "${STOP}" ]
    then
	break
    fi

done

# Make sure all products were produced

cat "${BUILD_LIST}" | while read PACKAGE
do
    section GATHERING ${PACKAGE}
    make "PRODUCTS_DEST=${DEST}" -C "${PACKAGE}" install-products
done


section BUILDING REPOSITORY

# TODO: This should be extracted on a per-packaging-system basis.

case "${OSINFO_PACKAGING}" in

    rpm)
	SOURCES="${REPO}/SRPMS"
	mkdir -p "${SOURCES}"
	find "${DEST}" -name '*.src.rpm' -exec mv {} "${SOURCES}" \;
	createrepo "${REPO}"
	;;    

    deb)
# This can later be used with the simple APT source.list setup below:
# deb [trusted=yes] file:/full/path/to/local/unibuild-repo ./
	(cd "${REPO}" && apt-ftparchive packages . > Packages)
	(cd "${REPO}" && apt-ftparchive -o APT::FTPArchive::Release::Origin=Unibuild -o APT::FTPArchive::Release::Suite=unibuild-snapshot -o APT::FTPArchive::Release::Codename=unibuild release . > Release)
	;;
    
    *)
	die "Unable to build a repository for ${OSINFO_FAMILY}"
	;;
esac


REPO_UNIBUILD="${REPO}/unibuild"
mkdir -p ${REPO_UNIBUILD}
cp -f "${BUILD_LIST}" "${REPO_UNIBUILD}/build-order"


exit 0
