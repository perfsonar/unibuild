#
# Common functions for Unibuild
#

WHOAMI=$(basename $0)
WHEREAMI=$(dirname $0)

warn()
{
    [ "$@" ] && echo "$@" 1>&2
}

die()
{
    warn "$@"
    exit 1
}

[ -d "${UNIBUILD}" ] || die "Can't find Unibuild directory."

export UNIBUILD_COMMANDS="${UNIBUILD}/commands"
export UNIBUILD_LIB="${UNIBUILD}/lib"

UNIBUILD_ORDER_FILE=unibuild-order

UNIBUILD_REPO_DIR=unibuild-repo
UNIBUILD_LOG=unibuild-log




#
# MACROS
#

# Set an OSINFO macro
set_osinfo_macro()
{
    eval export "OSINFO_$1=\"$2\""
}

# Set a user-defined macro
set_user_macro()
{
    echo "$1" | grep -E -q -e '^[A-Za-z0-9_]+=.*$' \
	|| die "Invalid macro definition '$1'"
	
    MACRO=$(echo "$1" | sed -e 's/=.*$//')
    VALUE=$(echo "$1" | sed -e 's/^[^=]*=//')

    eval export "UNIBUILD_USERDEF_$MACRO=\"$VALUE\""
}

# Dump a sorted list of the macros.  Note that this takes advantage of
# the sort order between OSINFO and UNIBUILD_USERDEF to make sure the
# latter overrides the former.
macros()
{
    set \
    | sort \
    | grep -E -e '^(OSINFO|UNIBUILD_USERDEF)_[^=]{1,}=' \
    | sed -e "s/^OSINFO_//g; s/^UNIBUILD_USERDEF_//g; s/='/=/; s/'\$//" \
    | awk -F= '{ macros[$1] = $2 } END { for (macro in macros) { printf "%s=%s\n", macro, macros[macro] } }' \
    | sort
}




#
# INFORMATION ABOUT THE OPERATING SYSTEM
#

OSINFO_OS=$(uname -s)

# This page has some useful information about figuring out what
# distribution you're running:
# http://linuxmafia.com/faq/Admin/release-files.html

if [ -e '/etc/redhat-release' ]; then

    set_osinfo_macro FAMILY RedHat
    set_osinfo_macro PACKAGING rpm
    # Lsb_release vanished in EL9.  Do this stuff the hard way.
    set_osinfo_macro DISTRO "$(source /etc/os-release && echo $ID)"
    set_osinfo_macro RELEASE "$(sed -e 's/^.*release\s\+//i; s/\s.*$//' /etc/redhat-release)"
    set_osinfo_macro CODENAME "$(sed -e 's/^.*[(]\([^)]\+\)[)].*$/\1/' /etc/redhat-release)"

elif [ -e '/etc/debian_version' ]; then

    set_osinfo_macro FAMILY Debian
    set_osinfo_macro PACKAGING deb
    set_osinfo_macro DISTRO "$(awk -F= '$1 == "NAME" { print $2 }' /etc/os-release | tr -d '"' | sed -e 's/\s.*$//' )"
    set_osinfo_macro RELEASE "$(awk -F= '$1 == "VERSION_ID" { print $2 }' /etc/os-release \
                       | tr -d '"')"
    set_osinfo_macro CODENAME "$(awk -F= '$1 == "VERSION" { print $2 }' /etc/os-release \
                        | sed -e 's/^.*[(]\(.*\)[)].*$/\1/')"

else

    die "Unibuild is not supported on this OS family."

fi

set_osinfo_macro MAJOR "$(echo "${OSINFO_RELEASE}" | cut -d . -f 1)"
set_osinfo_macro MINOR "$(echo "${OSINFO_RELEASE}" | cut -d . -f 2)"
set_osinfo_macro PATCH "$(echo "${OSINFO_RELEASE}" | cut -d . -f 3)"
set_osinfo_macro ARCH "$(uname -m)"


#
# PACKAGE BUILD ORDER AND BUNDLE FILTERING
#

bundle_filter()
{
    case "$1" in
        "")
            cat
            ;;
        none)
            grep -E -v -e '--bundle\s*[^\s]+'
            ;;
        *)
            grep -E -e "--bundle\s{1,}$1"
            ;;
    esac
}


# Run stdin through M4 with all of unibuild's macros in place.
unibuild_m4()
{
    if [ "$1" = "--prefix" ]
    then
	PREFIX="$2"
	shift
	shift
    else
	PREFIX=""
    fi
    
    # Make macro definition arguments for M4.
    DEFINES=$(macros \
		  | sed -e 's/^\([^=]\+\)=\(.*\)$/-D '\'"${PREFIX}"'\1=\2'\''/' \
		  | tr '\n' ' ')

    sh -c "m4 ${DEFINES}"
}


build_order()
{
    BUNDLE="$1"


    # Process file file:
    #  - Strip comments
    #  - Run through M4
    #  - Drop blank lines
    #  - Filter bundles we want or don't want
    #  - Grab package names only
    sed -e 's/\s*#.*$//' \
	| unibuild_m4 \
	| sed -e '/^\s*$/d' \
	| bundle_filter "${BUNDLE}" \
	| awk '{ print $1 }'
}


# List the switches in effect for a package.
# Args:
#  1 - Build order file
#  2 - Package name
#
# Output is one switch per line without the -- and with all arguments
# following, e.g.:
#   no-install
#   bundle x
package_switches()
{
    # Lke build_order, but different:
    #  - Strip comments
    #  - Run through M4
    #  - Drop blank lines
    #  - Filter bundles we want or don't want
    #  - Break lines on --
    #  - Ditch the blank ones
    sed -e 's/\s*#.*$//' "$1" \
	| unibuild_m4 \
	| sed -e '/^\s*$/d; s/^\s\+//; s/\s\+$//' \
	| grep -E -e "^*$2\\s" \
	| cut -d ' ' -f 2- \
	| sed -e 's/--/\n/g' \
	| grep -F -vx ''
}

# Determine whether or not a package has a switch
# Args:
#  1 - Build order file
#  2 - Package name
#  3 - Switch
package_has_switch()
{
    if package_switches "$1" "$2" | grep -E -q -e "^$3(\\s|\$)"
    then
	true
    else
	false
    fi
}



# Make sure the START and STOP parameters refer to something in the
# build list for a bundle
# Args:
#  1 - Package Name
#  2 - Bundle
#  3 - Build order file
validate_startstop()
{
    if [ -n "$1" ]
    then
	build_order "$2" < "$3" \
	    | grep -F -qx "$1" \
	    || die "$1: No such package."
    fi
}



#
# TEMPORARY FILES
#

TMPBASE="${TMPDIR:-/tmp}/${WHOAMI}.$$"


#
# CLEANUP ON EXIT
#

unibuild_cleanup()
{
    rm -rf ${TMPBASE}*
}
trap unibuild_cleanup EXIT



#
# EVERYTHING ELSE
#

section()
{
    printf "\n\n#\n# "
    echo "$@"
    printf "#\n\n"
}


unibuild_version()
{
    echo '__VERSION__'
}
