#!/bin/bash
#           ^ The lack of a -e is intentional.
#
# NOTE: This uses BASH arrays.
# TODO: Try and find a way to be POSIX sh compatible
#
# rpm-with-deps - Run RPM and install dependencies on failure.
#
# See the manual page for documentation.
#

TMPBASE=${TMP:=/tmp}/$(basename $0).$$

cleanup()
{
    rm -rf $TMPBASE*
}
trap cleanup EXIT

PROGRAM=$(echo $(basename $0) | sed -e 's/-.*$//')

RPM_ARGS=("$@")

# Try once, exiting if all went well.

"${PROGRAM}" "${RPM_ARGS[@]}" 2>$TMPBASE.first
STATUS=$?
[ "${STATUS}" -eq 0 ] && exit 0


# Figure out what packages were missing

grep -F 'is needed by' $TMPBASE.first \
    | awk '{ print $1 }' \
    > $TMPBASE.missing


# After this point, it's safe to die if something fails.
set -e


# If the build barfed and there were no packages missing, it's a
# legitimate error.

if [ "${STATUS}" -eq 0 -a ! -s $TMPBASE.missing ]
then
    cat $TMPBASE.first 1>&2
    exit $STATUS
fi

# Install anything that was missing.  DNF and YUM have a nasty habit
# of not treating uninstallable packages as being a problem, so the
# RPM that follows will have to die for its sins.

[ $(id -u) = 0 ] && RUN_AS_ROOT= || RUN_AS_ROOT=sudo

# Find whichever installer is available
for INSTALLER in dnf yum
do
    if command -v "${INSTALLER}" > /dev/null 2>&1
    then
	INSTALL_PACKAGE=${INSTALLER}
	break
    fi
done

if [ -z "${INSTALL_PACKAGE}" ]
then
    echo "Can't find a package installer." 1>&2
    exit 1
fi

< $TMPBASE.missing xargs -r ${RUN_AS_ROOT} ${INSTALL_PACKAGE} -y --color=never install 

# Do this manually because exec doesn't count as an exit.
cleanup

exec "${PROGRAM}" "${RPM_ARGS[@]}"
